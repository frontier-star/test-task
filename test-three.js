// Тестовое задание №3. Перечислите известные вам способы обойти значения JS массива и кратко опишите, как они работают.

const myArray = [
	{ id: 1, name: 'Алиса' },
	{ id: 2, name: 'Максим' },
	{ id: 3, name: 'Сергей' },
	{ id: 4, name: 'Матвей' }
];

console.log(myArray); // Выводим исходный массив


// метод forEach. Он используется для того, чтобы по очереди обойти все элементы массива и сделать с ними какие-то операции, например, вывести их в консоль, отобразить на странице или как-то видоизменить эти элементы. В общем, это просто обход по массиву
const forEachArray = myArray.forEach((item) => {
	item.name = "Name"; // Изменяем имя каждого элемента
});
console.log("После forEach:", forEachArray);

// find. Этот метод используется для того, чтобы найти какой-то конкретный элемент внутри массива. Работает он следующим образом: в него мы передаем функцию callback, которая ищет по элементам массива и возвращает первый найденный элемент, который подошел под условия.
const foundItem = myArray.find(item => item.name === "Максим");
console.log("Найденный элемент (find):", foundItem); // вернёт undefined, так как массив был изменён forEach раннее и "Максим" уже нет

//  findIndex. Похож на метод find, за исключением того, что он возвращает не сам элемент массива, а индекс этого элемента. Работает он следующим образом: обращаемся к массиву, вызываем метод findIndex, передаем в него функцию callback, которая будет выполнена по очереди для каждого элемента массива. На том элементе массива, на котором она вернет true, этот элемент будет считаться найденным, и будет возвращен его индекс.
const foundIndex = myArray.findIndex(item => item.name === "Сергей");
console.log("Индекс найденного элемента (findIndex):", foundIndex); // -1, так как элемент не будет найден

// filter. Фильтрует текущий массив с помощью специальной функции callback и на основе фильтрации возвращает новый массив. То есть если надо найти несколько элементов, которые соответствуют условию, тогда его и используем.
const filteredArray = myArray.filter(item => item.name === "Сергей");
console.log("Отфильтрованный массив (filter):", filteredArray); // [] пустой массив, таких элементов нет

// map. Используется для того, чтобы на основе существующего массива создать новый. При этом данные в новом массиве будут модифицированны
const mappedArray = myArray.map(item => ({
	...item,
	price: 100 // Добавляем новое свойство price, например, со значением 100
}));
console.log("Новый массив с price (map):", mappedArray);


// reduce. Может помочь посчитать общее значение на основе всех элементов массива, например, сумму
const totalPrice = mappedArray.reduce((acc, item) => acc + (item.price || 0), 0);
console.log("Общая сумма (reduce):", totalPrice); // 400